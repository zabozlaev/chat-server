type Channel {
  id: Int!
  name: String!
  public: Boolean!
  messages: [Message!]!
  members: [User!]!
  owner: User!
}

type ChannelMutationResponse {
  channel: Channel!
  error: [Error]
  success: Boolean!
}

type Query {
  allChannels: [Channel!]!
  getChannelMembers(channelId: Int!): [User]
}

type InviteUserResponse {
  user: User
  success: Boolean
  errors: [Error]
}

type BlockUserResponse {
  user: User
  success: Boolean
  errors: [Error]
  reason: String
}

type Mutation {
  createChannel(
    name: String!
    public: Boolean = false
  ): ChannelMutationResponse!
  inviteUser(channelId: Int!, newUserId: Int!): InviteUserResponse!
  blockUser(
    badUserId: Int
    channelId: Int!
    reason: String = ""
  ): BlockUserResponse
}

type Subscription {
  userBlocked(channelId: Int!): User
}
